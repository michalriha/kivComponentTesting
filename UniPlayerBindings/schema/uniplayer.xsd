<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
	xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
    xmlns:types="http://www.kiv.zcu.cz/component-testing/types"
	xmlns:r="http://www.kiv.zcu.cz/component-testing/player"
	targetNamespace="http://www.kiv.zcu.cz/component-testing/player"
	jaxb:version="2.1"
	elementFormDefault="qualified"
	jaxb:extensionBindingPrefixes="xjc">
	
	<!-- obecne typy // -->

    <xsd:import namespace="http://www.kiv.zcu.cz/component-testing/types" schemaLocation="https://raw.github.com/michalriha/kivComponentTesting/CommonDataTypes_custom_types/CommonTypes/schema/types.xsd" />
    
	<xsd:simpleType name="TNonNegativeLong">
		<xsd:restriction base="xsd:long">
			<xsd:minInclusive value="0" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="TNonNegativeDouble">
		<xsd:restriction base="xsd:double">
			<xsd:minInclusive value="0" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="TPositiveLong">
		<xsd:restriction base="xsd:long">
			<xsd:minInclusive value="1" />
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="TBundleName">
		<xsd:restriction base="xsd:token">
			<xsd:pattern value="(([a-z_]+[0-9]*)+\.)+([a-z_]+[0-9]*)*" />
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="TInterfaceName">
		<xsd:restriction base="xsd:token">
			<xsd:pattern value="(([a-z_]+[0-9]*)+\.)+([a-zA-Z_]+[0-9]*)*" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="TMethodName">
		<xsd:restriction base="xsd:token">
			<xsd:pattern value="[a-zA-Z_$]([a-zA-Z0-9_$])*" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="TVersion">
		<xsd:restriction base="xsd:token">
			<xsd:pattern value="(\d+\.)*(\d+)" />
		</xsd:restriction>
	</xsd:simpleType>

    <xsd:complexType name="TReturnedValueReference">
        <xsd:attribute name="ref" type="xsd:string" />
    </xsd:complexType>

	<xsd:complexType name="TValue">
		<xsd:choice>
            <xsd:element ref="types:String" /> <!-- <xsd:element name="String" type="xsd:string" /> -->
            <xsd:element ref="types:BigInteger" /><!-- <xsd:element name="BigInteger" type="xsd:integer" /> -->
            <xsd:element ref="types:Long" /> <!-- <xsd:element name="Long" type="xsd:long" /> -->
            <xsd:element ref="types:Integer" /> <!-- <xsd:element name="Integer" type="xsd:int" /> -->
            <xsd:element ref="types:Short" /> <!-- <xsd:element name="Short" type="xsd:short" /> -->
            <xsd:element ref="types:Byte" /> <!-- <xsd:element name="Byte" type="xsd:byte" /> -->
            <xsd:element ref="types:BigDecimal" /> <!-- <xsd:element name="BigDecimal" type="xsd:decimal"/> -->
            <xsd:element ref="types:Double" /> <!-- <xsd:element name="Double" type="xsd:double" /> -->
            <xsd:element ref="types:Float" /> <!-- <xsd:element name="Float" type="xsd:float" /> -->
            <xsd:element ref="types:Boolean" /> <!-- <xsd:element name="Boolean" type="xsd:boolean" /> -->
            <xsd:element ref="types:File" /> <!--  name="File" type="types:TFile" /> -->
            <xsd:element ref="types:Strings" /> <!-- name="Strings" type="types:TStringCollection" /> -->
            <xsd:element ref="types:BigInts" /> <!-- name="BigInts" type="types:TBigIntegerCollection" /> -->
            <xsd:element ref="types:Longs" /> <!-- <name="Longs" type="types:TLongCollection" /> -->
            <xsd:element ref="types:Ints" /> <!-- name="Ints" type="types:TIntCollection" /> -->
            <xsd:element ref="types:Shorts" /> <!--  name="Shorts" type="types:TShortCollection" /> -->
            <xsd:element ref="types:Bytes" /> <!-- name="Bytes" type="types:TByteCollection" /> -->
            <xsd:element ref="types:BigDecimals" /> <!-- name="BigDecimals" type="types:TBigDecimalCollection" /> -->
            <xsd:element ref="types:Doubles" /> <!-- name="Doubles" type="types:TDoubleCollection" /> -->
            <xsd:element ref="types:Floats" /> <!-- name="Floats" type="types:TFloatCollection" /> -->
            <xsd:element ref="types:Booleans" /> <!-- name="Booleans" type="types:TBooleanCollection" /> -->
            <xsd:element ref="types:Files" /> <!-- name="Files" type="types:TFileCollection" /> -->
            <xsd:element ref="types:Null" /> <!-- name="Null" type="types:TNull" /> -->
            <xsd:element ref="types:CustomTypeData" />
            <xsd:element name="returned-value" type="r:TReturnedValueReference" />
		</xsd:choice>
	</xsd:complexType>

	<xsd:complexType name="TArgument">
		<xsd:complexContent>
			<xsd:extension base="r:TValue">
				<xsd:attribute name="ord-num" type="xsd:int" default="0" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Gaussovo pravdepodobnostni rozdeleni // -->
	<xsd:complexType name="TGaussian">
		<xsd:attribute name="mean" type="xsd:double" use="required" />
		<xsd:attribute name="deviation" type="xsd:double" use="required" />
	</xsd:complexType>

	<!-- exponencialni pravdepodobnostni rozdeleni // -->
	<xsd:complexType name="TExponential">
		<xsd:attribute name="rate" type="r:TNonNegativeLong" use="required" />
		<xsd:attribute name="time-span" type="r:TNonNegativeLong"
			use="required" />
	</xsd:complexType>
	
	<!-- pravidelne opakovani // -->
	<xsd:complexType name="TEquidistant">
		<xsd:attribute name="step" type="r:TNonNegativeLong" use="required" />
	</xsd:complexType>

	<!-- opakovani // -->
	<xsd:complexType name="TRecurrence">
		<xsd:choice>
			<xsd:element name="equidistant" type="r:TEquidistant" />
			<xsd:element name="gaussian" type="r:TGaussian" />
			<xsd:element name="exponential" type="r:TExponential" />
		</xsd:choice>
		<xsd:attribute name="count" type="r:TPositiveLong" default="1" />
		<xsd:attribute name="repeat-until" type="r:TPositiveLong" default="9223372036854775807" />
	</xsd:complexType>

	<!-- volani metody // -->

	<xsd:complexType name="TArgumentsList">
		<xsd:sequence>
			<xsd:element name="argument" type="r:TArgument" minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="TCall">
		<xsd:sequence>
			<xsd:element name="arguments" type="r:TArgumentsList">
                <xsd:unique name="argumentOrdNum">
                    <xsd:selector xpath="r:argument" />
                    <xsd:field xpath="@ord-num" />
                </xsd:unique>
            </xsd:element>
		</xsd:sequence>
		<xsd:attribute name="service" type="r:TInterfaceName" use="required" />
		<xsd:attribute name="method" type="r:TMethodName" use="required" />
		<xsd:attribute name="filter" type="xsd:string" use="optional" />
		<xsd:attribute name="use-all-services-availabe" type="xsd:boolean" default="false" />
		<xsd:attribute name="returned-value-id" type="xsd:string" />
	</xsd:complexType>

	<!-- vyvolani udalosti // -->
	<xsd:complexType name="TEvent">
		<xsd:sequence>
			<xsd:element name="argument" type="r:TValue" />
		</xsd:sequence>
		<xsd:attribute name="topic" type="xsd:string" use="required" />
		<xsd:attribute name="key" type="xsd:string" use="required" />
	</xsd:complexType>

    <xsd:complexType name="TEvent2Property">
        <xsd:complexContent>
            <xsd:extension base="r:TValue">
                <xsd:attribute name="key" type="xsd:string" />
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:complexType name="TEvent2">
        <xsd:sequence>
            <xsd:element name="property" type="r:TEvent2Property" minOccurs="1" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="topic" type="xsd:string" />
    </xsd:complexType>

	<xsd:complexType name="TCommand">
		<xsd:choice>
			<xsd:element name="call" type="r:TCall" />
			<xsd:element name="event" type="r:TEvent2">
			     <xsd:unique name="propertyKey">
			         <xsd:selector xpath="r:property" />
			         <xsd:field xpath="@key" />
			     </xsd:unique>
			</xsd:element>
		</xsd:choice>
	</xsd:complexType>

	<!-- akce scenare -->
	<xsd:complexType name="TAction">
		<xsd:sequence>
			<xsd:element name="recurrence" type="r:TRecurrence" minOccurs="0" maxOccurs="1" />
			<xsd:element name="command" type="r:TCommand" />
		</xsd:sequence>
		<xsd:attribute name="time" type="xsd:long" use="required" />
	</xsd:complexType>

	<!-- seznam akci (scenar) -->
	<xsd:complexType name="TActionsList">
		<xsd:sequence>
			<xsd:element name="action" type="r:TAction" minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="TSettings">
		<xsd:sequence>
			<xsd:element name="time-limit" type="r:TPositiveLong" default="9223372036854775807"  minOccurs="0" maxOccurs="1" />
			<xsd:element name="simul-step-delay" type="r:TNonNegativeLong" default="0"  minOccurs="0" maxOccurs="1" />
			<xsd:element ref="types:custom-types-support" />
		</xsd:sequence>
	</xsd:complexType>
	
	<!-- projekt // -->
	<xsd:complexType name="TProject">
		<xsd:sequence>
			<xsd:element name="settings" type="r:TSettings" minOccurs="0" maxOccurs="1" />
			<xsd:element name="actions"  type="r:TActionsList">
                 <xsd:unique name="returnedValueKey">
                     <xsd:selector xpath=".//r:call" />
                     <xsd:field xpath="@returned-value-id" />
                 </xsd:unique>
                 <xsd:keyref name="returnedValueReference" refer="r:returnedValueKey">
                    <xsd:selector xpath=".//r:returned-value" />
                    <xsd:field xpath="@ref" />
                 </xsd:keyref>
            </xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<!-- dokument // -->
	<xsd:element name="project" type="r:TProject" />
</xsd:schema>