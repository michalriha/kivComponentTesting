//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.06.15 at 04:41:25 PM CEST 
//


package cz.zcu.kiv.bp.uniplayer.bindings.basics;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Collection;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;

import cz.zcu.kiv.bp.uniplayer.bindings.*;


/**
 * <p>Java class for TCollection complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TCollection">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;attribute name="type" type="{http://www.kiv.zcu.cz/component-testing/player}TCollectionType" default="ArrayList" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TCollection")
@XmlSeeAlso({
    TLongCollection.class,
    TIntCollection.class,
    TBooleanCollection.class,
    TByteCollection.class,
    TFloatCollection.class,
    TBigDecimalCollection.class,
    TBigIntegerCollection.class,
    TDoubleCollection.class,
    TStringCollection.class,
    TFileCollection.class,
    TShortCollection.class
})
public abstract class TCollection<T>
{
	public abstract List<TCollectionItem<T>> getItems();
	
	public abstract Class<? extends TCollectionItem<T>> getComponentWrapperClass();

	public void add(T value) throws InstantiationException, IllegalAccessException
	{
		TCollectionItem<T> wrappedItem = this.getComponentWrapperClass().newInstance();
		wrappedItem.setOrdNum(this.getItems().size());
		wrappedItem.setValue(value);
		this.getItems().add(wrappedItem);
	}
	
	public void addAll(Collection<T> values) throws InstantiationException, IllegalAccessException
	{
		for (T value : values)
		{
			this.add(value);
		}
	}
	
	@SuppressWarnings("unchecked")
	public Class<T> getComponentType()
	{
		Type type = getClass().getGenericSuperclass(); // returned super class is actually this class
		ParameterizedType paramType = (ParameterizedType) type;
		return (Class<T>) paramType.getActualTypeArguments()[0];
	}
	
    @XmlAttribute(name = "type")
    protected TCollectionType type;
	
    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link TCollectionType }
     *     
     */
    public TCollectionType getType() {
        if (type == null) {
            return TCollectionType.ARRAY_LIST;
        } else {
            return type;
        }
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link TCollectionType }
     *     
     */
    public void setType(TCollectionType value) {
        this.type = value;
    }

}
