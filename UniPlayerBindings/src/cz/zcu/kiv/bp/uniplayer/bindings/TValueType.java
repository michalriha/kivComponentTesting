//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.06.18 at 08:12:58 PM CEST 
//


package cz.zcu.kiv.bp.uniplayer.bindings;

import java.io.File;
import java.util.ArrayList;
import java.util.LinkedList;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;

import cz.zcu.kiv.bp.uniplayer.bindings.basics.TCollection;


/**
 * <p>Java class for TValueType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="TValueType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="String"/>
 *     &lt;enumeration value="stringArrayList"/>
 *     &lt;enumeration value="stringLinkedList"/>
 *     &lt;enumeration value="stringArray"/>
 *     &lt;enumeration value="int"/>
 *     &lt;enumeration value="intArrayList"/>
 *     &lt;enumeration value="intLinkedList"/>
 *     &lt;enumeration value="intArray"/>
 *     &lt;enumeration value="double"/>
 *     &lt;enumeration value="doubleArrayList"/>
 *     &lt;enumeration value="doubleLinkedList"/>
 *     &lt;enumeration value="doubleArray"/>
 *     &lt;enumeration value="File"/>
 *     &lt;enumeration value="FileArrayList"/>
 *     &lt;enumeration value="FileLinkedList"/>
 *     &lt;enumeration value="FileArray"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "TValueType")
@XmlEnum
public enum TValueType {

    @XmlEnumValue("String")
    STRING("String"),
    @XmlEnumValue("stringArrayList")
    STRING_ARRAY_LIST("stringArrayList"),
    @XmlEnumValue("stringLinkedList")
    STRING_LINKED_LIST("stringLinkedList"),
    @XmlEnumValue("stringArray")
    STRING_ARRAY("stringArray"),
    @XmlEnumValue("int")
    INT("int"),
    @XmlEnumValue("intArrayList")
    INT_ARRAY_LIST("intArrayList"),
    @XmlEnumValue("intLinkedList")
    INT_LINKED_LIST("intLinkedList"),
    @XmlEnumValue("intArray")
    INT_ARRAY("intArray"),
    @XmlEnumValue("double")
    DOUBLE("double"),
    @XmlEnumValue("doubleArrayList")
    DOUBLE_ARRAY_LIST("doubleArrayList"),
    @XmlEnumValue("doubleLinkedList")
    DOUBLE_LINKED_LIST("doubleLinkedList"),
    @XmlEnumValue("doubleArray")
    DOUBLE_ARRAY("doubleArray"),
    @XmlEnumValue("File")
    FILE("File"),
    @XmlEnumValue("FileArrayList")
    FILE_ARRAY_LIST("FileArrayList"),
    @XmlEnumValue("FileLinkedList")
    FILE_LINKED_LIST("FileLinkedList"),
    @XmlEnumValue("FileArray")
    FILE_ARRAY("FileArray");
    private final String value;

    TValueType(String v) {
        value = v;
    }

    @SuppressWarnings("unchecked")
	public <T extends TCollection<?>> Class<T> wrapperClass()
    {
		Class<T> ret = null;
		switch (fromValue(value))
		{
			case DOUBLE_ARRAY:
			case DOUBLE_ARRAY_LIST:
			case DOUBLE_LINKED_LIST:
				ret = (Class<T>) TDoubleCollection.class;
				break;
				
			case FILE_ARRAY:
			case FILE_ARRAY_LIST:
			case FILE_LINKED_LIST:
				ret = (Class<T>) TFileCollection.class;
				break;
				
			case INT_ARRAY:
			case INT_ARRAY_LIST:
			case INT_LINKED_LIST:
				ret = (Class<T>) TIntCollection.class;
				break;
				
			case STRING_ARRAY:
			case STRING_ARRAY_LIST:
			case STRING_LINKED_LIST:
				ret = (Class<T>) TStringCollection.class;
				break;
				
			default:
				break;
		}
		
		return ret;
    }
    
    public Class<?> baseClass()
    {
        switch (fromValue(value))
        {
			case DOUBLE:
				return Double.class;
				
			case DOUBLE_ARRAY:
				return Double[].class;
				
			case FILE:
				return File.class;
				
			case FILE_ARRAY:
				return File[].class;

			case INT:
				return Integer.class;
				
			case INT_ARRAY:
				return Integer[].class;

			case STRING:
				return String.class;
				
			case STRING_ARRAY:
				return String[].class;

			default:
		    	if (value.endsWith("ArrayList"))
		    	{
		    		return ArrayList.class;
		    	}
		    	else if (value.endsWith("LinkedList"))
		    	{
		    		return LinkedList.class;
		    	}
		    	else return void.class;
        }
    }
    
    public String value() {
        return value;
    }

    public static TValueType fromBaseClass(Class<?> clazz, Class<?> componentClazz)
    {
    	TValueType ret = TValueType.STRING;
    	
		if (clazz == String.class)
		{
			ret = TValueType.STRING;
		}
		else if (clazz == Integer.class)
		{
			ret = TValueType.INT;
		}
		else if (clazz == Double.class)
		{
			ret = TValueType.DOUBLE;
		}
		else if (clazz == File.class)
		{
			ret = TValueType.FILE;
		}
		else if (clazz == LinkedList.class)
    	{
    		if (componentClazz == String.class)
    		{
    			ret = TValueType.STRING_LINKED_LIST;
    		}
    		else if (componentClazz == Integer.class)
    		{
    			ret = TValueType.INT_LINKED_LIST;
    		}
    		else if (componentClazz == Double.class)
    		{
    			ret = TValueType.DOUBLE_LINKED_LIST;
    		}
    		else if (componentClazz == File.class)
    		{
    			ret = TValueType.FILE_LINKED_LIST;
    		}
    	}
    	else if (clazz == ArrayList.class)
    	{
    		if (componentClazz == String.class)
    		{
    			ret = TValueType.STRING_ARRAY_LIST;
    		}
    		else if (componentClazz == Integer.class)
    		{
    			ret = TValueType.INT_ARRAY_LIST;
    		}
    		else if (componentClazz == Double.class)
    		{
    			ret = TValueType.DOUBLE_ARRAY_LIST;
    		}
    		else if (componentClazz == File.class)
    		{
    			ret = TValueType.FILE_ARRAY_LIST;
    		}    		
    	}
    	else if (clazz == String[].class)
    	{
    		ret = TValueType.STRING_ARRAY;
    	}
    	else if (clazz == Integer[].class)
    	{
    		ret = TValueType.INT_ARRAY;
    	}
    	else if (clazz == Double[].class)
    	{
    		ret = TValueType.DOUBLE_ARRAY;
    	}
    	else if (clazz == File[].class)
    	{
    		ret = TValueType.FILE_ARRAY;
    	}

		return ret;
    }
    
    public static TValueType fromValue(String v) {
        for (TValueType c: TValueType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
